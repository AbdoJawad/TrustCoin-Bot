import os
import logging
import asyncio
import threading
from dotenv import load_dotenv
from flask import Flask, request
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputFile,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)
from telegram.error import InvalidToken

# Load environment variables
load_dotenv()

# Get bot token from environment
BOT_TOKEN_ARA = os.getenv('BOT_TOKEN_ARA')

# Validate token
if not BOT_TOKEN_ARA:
    raise ValueError("‚ùå BOT_TOKEN_ARA not found in environment variables. Please check your .env file.")

# Main menu keyboard
def build_main_menu() -> InlineKeyboardMarkup:
    """Build the main menu keyboard."""
    keyboard = [
        [InlineKeyboardButton("üìã ŸÜÿ∏ÿ±ÿ© ÿπÿßŸÖÿ© ŸàÿßŸÑÿ®ÿØÿ°", callback_data="overview")],
        [InlineKeyboardButton("‚õèÔ∏è ÿßŸÑÿ™ÿπÿØŸäŸÜ ŸàÿßŸÑŸÜŸÇÿßÿ∑", callback_data="points")],
        [InlineKeyboardButton("üéØ ÿßŸÑŸÖŸáÿßŸÖ ŸàÿßŸÑŸÖŸÉÿßŸÅÿ¢ÿ™", callback_data="missions")],
        [InlineKeyboardButton("üë• ÿßŸÑÿ•ÿ≠ÿßŸÑÿ© ŸàÿßŸÑŸÖÿ¨ÿ™ŸÖÿπ", callback_data="referral")],
        [InlineKeyboardButton("üó∫Ô∏è ÿÆÿßÿ±ÿ∑ÿ© ÿßŸÑÿ∑ÿ±ŸäŸÇ", callback_data="roadmap")],
        [InlineKeyboardButton("üì± ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇ", callback_data="download")],
        [InlineKeyboardButton("üîí ÿßŸÑÿ£ŸÖÿßŸÜ ŸàŸÖŸÉÿßŸÅÿ≠ÿ© ÿßŸÑÿ∫ÿ¥", callback_data="security")],
        [InlineKeyboardButton("‚ùì ÿßŸÑÿ£ÿ≥ÿ¶ŸÑÿ© ÿßŸÑÿ¥ÿßÿ¶ÿπÿ©", callback_data="faq")],
        [InlineKeyboardButton("üåê ÿßŸÑÿ±Ÿàÿßÿ®ÿ∑ ÿßŸÑÿßÿ¨ÿ™ŸÖÿßÿπŸäÿ©", callback_data="social")],
        [InlineKeyboardButton("üåç ŸÖÿ¨ŸÖŸàÿπÿßÿ™ ÿßŸÑŸÑÿ∫ÿßÿ™", callback_data="language_groups")],
    ]
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle the /start command by showing the main menu."""
    welcome_text = (
        "üöÄ **ÿ£ŸáŸÑÿßŸã ÿ®ŸÉ ŸÅŸä TrustCoin (TBN)!** üöÄ\n\n"
        "üíé **ÿßŸÑÿ™ÿπÿØŸäŸÜ ÿßŸÑŸÖÿ≠ŸÖŸàŸÑ ÿßŸÑÿ´Ÿàÿ±Ÿä ÿπŸÑŸâ Binance Smart Chain**\n\n"
        "üéÅ **ŸÖŸÉÿßŸÅÿ£ÿ© ÿßŸÑÿ™ÿ±ÿ≠Ÿäÿ®:** ÿßÿ≠ÿµŸÑ ÿπŸÑŸâ 1,000 ŸÜŸÇÿ∑ÿ© ŸÅŸàÿ±ÿßŸã ÿπŸÜÿØ ÿßŸÑÿ™ÿ≥ÿ¨ŸäŸÑ!\n"
        "‚õèÔ∏è **ÿßŸÑÿ™ÿπÿØŸäŸÜ:** ÿßŸÉÿ≥ÿ® ÿ≠ÿ™Ÿâ 1,000 ŸÜŸÇÿ∑ÿ© ŸÉŸÑ 24 ÿ≥ÿßÿπÿ©\n"
        "üí∞ **ÿßŸÑÿ™ÿ≠ŸàŸäŸÑ:** 1,000 ŸÜŸÇÿ∑ÿ© = 1 ÿ±ŸÖÿ≤ TBN\n"
        "üåü **ÿßŸÑÿπÿ±ÿ∂ ÿßŸÑÿ•ÿ¨ŸÖÿßŸÑŸä:** 20 ŸÖŸÑŸäÿßÿ± ÿ±ŸÖÿ≤ TBN\n\n"
        "üì± ÿ≠ŸÖŸëŸÑ ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇ ÿßŸÑÿ¢ŸÜ Ÿàÿßÿ®ÿØÿ£ ÿ±ÿ≠ŸÑÿ™ŸÉ ŸÅŸä ÿπÿßŸÑŸÖ ÿßŸÑÿπŸÖŸÑÿßÿ™ ÿßŸÑŸÖÿ¥ŸÅÿ±ÿ©!\n\n"
        "üëá ÿßÿÆÿ™ÿ± ŸÇÿ≥ŸÖÿßŸã ŸÑÿ™ÿπÿ±ŸÅ ÿßŸÑŸÖÿ≤ŸäÿØ:"
    )
    
    # Send logo with welcome message
    logo_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'assets', 'logo.png')
    
    try:
        with open(logo_path, 'rb') as logo_file:
            await update.message.reply_photo(
                photo=InputFile(logo_file, filename='logo.png'),
                caption=welcome_text,
                reply_markup=build_main_menu(),
                parse_mode="Markdown"
            )
    except FileNotFoundError:
        # Fallback to text message if logo not found
        await update.message.reply_text(
            welcome_text,
            reply_markup=build_main_menu(),
            parse_mode="Markdown"
        )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle all callback queries from inline keyboards."""
    query = update.callback_query
    await query.answer()
    data = query.data

    def send_or_edit_message(text, reply_markup=None, parse_mode="Markdown"):
        """Helper function to send new message if photo exists, otherwise edit."""
        if query.message.photo:
            return query.message.reply_text(text=text, reply_markup=reply_markup, parse_mode=parse_mode)
        else:
            return query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode=parse_mode)

    if data == "overview":
        text = (
            "üìã **ŸÜÿ∏ÿ±ÿ© ÿπÿßŸÖÿ© ŸàÿßŸÑÿ®ÿØÿ°**\n\n"
            "üåü TrustCoin (TBN) ŸáŸà ŸÜÿ∏ÿßŸÖ ŸÖŸÉÿßŸÅÿ¢ÿ™ ÿ´Ÿàÿ±Ÿä ŸÇÿßÿ¶ŸÖ ÿπŸÑŸâ ÿßŸÑÿ®ŸÑŸàŸÉ ÿ™ÿ¥ŸäŸÜ ÿπŸÑŸâ ÿ¥ÿ®ŸÉÿ© Binance ÿßŸÑÿ∞ŸÉŸäÿ©.\n\n"
            "üöÄ **ŸÉŸäŸÅŸäÿ© ÿßŸÑÿ®ÿØÿ°:**\n"
            "1Ô∏è‚É£ **ÿ≠ŸÖŸëŸÑ ÿ™ÿ∑ÿ®ŸäŸÇ TrustCoin** ŸÑŸÜÿ∏ÿßŸÖ iOS ÿ£Ÿà Android Ÿàÿ£ŸÜÿ¥ÿ¶ ÿ≠ÿ≥ÿßÿ®ŸÉ\n"
            "üéÅ ÿßÿ≠ÿµŸÑ ÿπŸÑŸâ **ŸÖŸÉÿßŸÅÿ£ÿ© ÿ™ÿ±ÿ≠Ÿäÿ® 1,000 ŸÜŸÇÿ∑ÿ©** ŸÅŸàÿ±ÿßŸã!\n\n"
            "2Ô∏è‚É£ **ÿßÿ®ÿØÿ£ ÿ¨ŸÑÿ≥ÿßÿ™ ÿßŸÑÿ™ÿπÿØŸäŸÜ ŸÑŸÖÿØÿ© 24 ÿ≥ÿßÿπÿ©** ÿßŸÑÿ™Ÿä ÿ™ÿ≥ÿ™ŸÖÿ± ÿ≠ÿ™Ÿâ ÿπŸÜÿØ ÿ•ÿ∫ŸÑÿßŸÇ ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇ\n"
            "üíæ Ÿäÿ™ŸÖ ÿ≠ŸÅÿ∏ ÿßŸÑÿ™ŸÇÿØŸÖ ÿ™ŸÑŸÇÿßÿ¶ŸäÿßŸã ŸÉŸÑ ÿ≥ÿßÿπÿ©\n\n"
            "3Ô∏è‚É£ **ÿ£ŸÉŸÖŸÑ ÿßŸÑŸÖŸáÿßŸÖ Ÿàÿ£ÿØÿ± ÿπÿ¨ŸÑÿ© ÿßŸÑÿ≠ÿ∏** ŸÑŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ŸÜŸÇÿßÿ∑ ÿ•ÿ∂ÿßŸÅŸäÿ©\n"
            "üéØ ÿ∑ÿ±ŸÇ ŸÖÿ™ÿπÿØÿØÿ© ŸÑŸÉÿ≥ÿ® ÿßŸÑŸÖŸÉÿßŸÅÿ¢ÿ™ ŸäŸàŸÖŸäÿßŸã\n\n"
            "4Ô∏è‚É£ **ÿ≠ŸàŸëŸÑ ŸÜŸÇÿßÿ∑ŸÉ ÿ•ŸÑŸâ ÿ±ŸÖŸàÿ≤ TBN ÿ≠ŸÇŸäŸÇŸäÿ©** ÿπÿ®ÿ± ÿßŸÑÿπŸÇÿØ ÿßŸÑÿ∞ŸÉŸä ÿßŸÑŸÖÿ§ÿ™ŸÖÿ™\n"
            "üí∞ **1,000 ŸÜŸÇÿ∑ÿ© = 1 ÿ±ŸÖÿ≤ TBN**\n\n"
            "üì± ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇ ŸÖÿ™ÿπÿØÿØ ÿßŸÑŸÖŸÜÿµÿßÿ™ (React Native) ŸÖÿπ ŸÖŸäÿ≤ÿßÿ™ ÿßŸÑÿØÿ±ÿØÿ¥ÿ© ŸàÿßŸÑŸÅÿ±ŸäŸÇ\n"
            "üîí TrustCoin Ÿäÿ±ŸÉÿ≤ ÿπŸÑŸâ ÿßŸÑÿ¥ŸÅÿßŸÅŸäÿ© ŸàÿßŸÑÿ™ÿ∑ŸàŸäÿ± ÿßŸÑŸÖÿ¨ÿ™ŸÖÿπŸä ŸàÿßŸÑŸÇŸäŸÖÿ© ÿ∑ŸàŸäŸÑÿ© ÿßŸÑŸÖÿØŸâ"
        )
        await send_or_edit_message(text, build_main_menu())

    elif data == "back":
        await send_or_edit_message("ÿßŸÑŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©:", build_main_menu())

    else:
        await send_or_edit_message("ÿÆŸäÿßÿ± ÿ∫Ÿäÿ± ÿµÿ≠Ÿäÿ≠. ÿßŸÑÿπŸàÿØÿ© ŸÑŸÑŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©.", build_main_menu())

def main() -> None:
    """Initialize the bot with Flask webhook support for production or polling for development."""
    try:
        # Initialize the Telegram bot application
        app = ApplicationBuilder().token(BOT_TOKEN_ARA).build()
        
        # Add handlers
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CallbackQueryHandler(button_handler))
        
        # Check if we're running in webhook mode (production) or polling mode (development)
        webhook_url = os.getenv('WEBHOOK_URL')
        port = int(os.getenv('PORT', 5000))
        
        if webhook_url:
            # Production mode with webhook
            print(f"üöÄ Starting Arabic bot in webhook mode on port {port}")
            
            # Initialize Flask app
            flask_app = Flask(__name__)
            
            @flask_app.route('/webhook', methods=['POST'])
            def webhook():
                """Handle incoming webhook requests from Telegram."""
                try:
                    update = Update.de_json(request.get_json(force=True), app.bot)
                    # Run the update handler in a separate thread to avoid blocking
                    def run_update():
                        asyncio.run(app.process_update(update))
                    threading.Thread(target=run_update).start()
                    return 'OK'
                except Exception as e:
                    logging.error(f"Error processing webhook: {e}")
                    return 'Error', 500
            
            @flask_app.route('/health', methods=['GET'])
            def health():
                """Health check endpoint."""
                return {'status': 'healthy', 'bot': 'arabic'}
            
            @flask_app.route('/', methods=['GET'])
            def home():
                """Home endpoint."""
                return {'message': 'TrustCoin Arabic Bot is running!', 'status': 'active'}
            
            # Set webhook
            asyncio.run(app.bot.set_webhook(url=f"{webhook_url}/webhook"))
            
            # Start Flask server
            flask_app.run(host='0.0.0.0', port=port, debug=False)
        else:
            # Development mode with polling
            print("üîÑ Starting Arabic bot in polling mode (development)")
            app.run_polling(drop_pending_updates=True)
            
    except InvalidToken:
        print("‚ùå Invalid bot token. Please check your BOT_TOKEN_ARA in .env file.")
    except Exception as e:
        print(f"‚ùå Error starting Arabic bot: {e}")
        logging.error(f"Bot startup error: {e}")

if __name__ == "__main__":
    main()
